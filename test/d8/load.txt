# EXE: test/run-d8.py
(module
  (memory 128
      (segment 0 "\ff\ff\ff\ff")
      (segment 4 "\00\00\ce\41")
      (segment 8 "\00\00\00\00\00\ff\8f\40")
      (segment 16 "\ff\ff\ff\ff\ff\ff\ff\ff"))

  (export "i32_load8_s" $i32_load8_s)
  (func $i32_load8_s (result i32) (i32.load8_s (i32.const 0)))
  (export "i32_load16_s" $i32_load16_s)
  (func $i32_load16_s (result i32) (i32.load16_s (i32.const 0)))
  (export "i32_load" $i32_load)
  (func $i32_load (result i32) (i32.load (i32.const 0)))

  (export "i32_load8_u" $i32_load8_u)
  (func $i32_load8_u (result i32) (i32.load8_u (i32.const 0)))
  (export "i32_load16_u" $i32_load16_u)
  (func $i32_load16_u (result i32) (i32.load16_u (i32.const 0)))

  ;; v8-native-prototype currently crashes if you try to return an i64, so
  ;; we'll do a comparison against the expected value instead.
  (export "i64_load" $i64_load)
  (func $i64_load (result i32) (i64.eq (i64.load (i32.const 16))
                                       (i64.const -1)))

  (export "f32_load" $f32_load)
  (func $f32_load (result f32) (f32.load (i32.const 4)))

  (export "f64_load" $f64_load)
  (func $f64_load (result f64) (f64.load (i32.const 8)))
)
# STDOUT:
i32_load8_s() = -1
i32_load16_s() = -1
i32_load() = -1
i32_load8_u() = 255
i32_load16_u() = 65535
i64_load() = 1
f32_load() = 25.75
f64_load() = 1023.875
