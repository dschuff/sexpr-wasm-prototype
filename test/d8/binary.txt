# EXE: test/run-d8.py
(module
  ;; i32
  (export "i32_add" $i32_add)
  (func $i32_add (result i32) (i32.add (i32.const 1) (i32.const 2)))
  (export "i32_sub" $i32_sub)
  (func $i32_sub (result i32) (i32.sub (i32.const 20) (i32.const 4)))
  (export "i32_mul" $i32_mul)
  (func $i32_mul (result i32) (i32.mul (i32.const 3) (i32.const 7)))
  (export "i32_div_s" $i32_div_s)
  (func $i32_div_s (result i32) (i32.div_s (i32.const -4) (i32.const 2)))
  (export "i32_div_u" $i32_div_u)
  (func $i32_div_u (result i32) (i32.div_u (i32.const -4) (i32.const 2)))
  (export "i32_rem_s" $i32_rem_s)
  (func $i32_rem_s (result i32) (i32.rem_s (i32.const -5) (i32.const 2)))
  (export "i32_rem_u" $i32_rem_u)
  (func $i32_rem_u (result i32) (i32.rem_u (i32.const -5) (i32.const 2)))
  (export "i32_and" $i32_and)
  (func $i32_and (result i32) (i32.and (i32.const 11) (i32.const 5)))
  (export "i32_or" $i32_or)
  (func $i32_or (result i32) (i32.or (i32.const 11) (i32.const 5)))
  (export "i32_xor" $i32_xor)
  (func $i32_xor (result i32) (i32.xor (i32.const 11) (i32.const 5)))
  (export "i32_shl" $i32_shl)
  (func $i32_shl (result i32) (i32.shl (i32.const -100) (i32.const 3)))
  (export "i32_shr_u" $i32_shr_u)
  (func $i32_shr_u (result i32) (i32.shr_u (i32.const -100) (i32.const 3)))
  (export "i32_shr_s" $i32_shr_s)
  (func $i32_shr_s (result i32) (i32.shr_s (i32.const -100) (i32.const 3)))

  ;; i64
  ;; v8-native-prototype currently crashes if you try to return an i64, so
  ;; we'll do a comparison against the expected value instead.
  (export "i64_add" $i64_add)
  (func $i64_add (result i32) (i64.eq (i64.add (i64.const 1) (i64.const 2))
                                      (i64.const 3)))
  (export "i64_sub" $i64_sub)
  (func $i64_sub (result i32) (i64.eq (i64.sub (i64.const 20) (i64.const 4))
                                      (i64.const 16)))
  (export "i64_mul" $i64_mul)
  (func $i64_mul (result i32) (i64.eq (i64.mul (i64.const 3) (i64.const 7))
                                      (i64.const 21)))
  (export "i64_div_s" $i64_div_s)
  (func $i64_div_s (result i32) (i64.eq (i64.div_s (i64.const -4) (i64.const 2))
                                      (i64.const -2)))
  (export "i64_div_u" $i64_div_u)
  (func $i64_div_u (result i32) (i64.eq (i64.div_u (i64.const -4) (i64.const 2))
                                      (i64.const 9223372036854775806)))
  (export "i64_rem_s" $i64_rem_s)
  (func $i64_rem_s (result i32) (i64.eq (i64.rem_s (i64.const -5) (i64.const 2))
                                      (i64.const -1)))
  (export "i64_rem_u" $i64_rem_u)
  (func $i64_rem_u (result i32) (i64.eq (i64.rem_u (i64.const -5) (i64.const 2))
                                      (i64.const 1)))
  (export "i64_and" $i64_and)
  (func $i64_and (result i32) (i64.eq (i64.and (i64.const 11) (i64.const 5))
                                      (i64.const 1)))
  (export "i64_or" $i64_or)
  (func $i64_or (result i32) (i64.eq (i64.or (i64.const 11) (i64.const 5))
                                      (i64.const 15)))
  (export "i64_xor" $i64_xor)
  (func $i64_xor (result i32) (i64.eq (i64.xor (i64.const 11) (i64.const 5))
                                      (i64.const 14)))
  (export "i64_shl" $i64_shl)
  (func $i64_shl (result i32) (i64.eq (i64.shl (i64.const -100) (i64.const 3))
                                      (i64.const -800)))
  (export "i64_shr_u" $i64_shr_u)
  (func $i64_shr_u (result i32)
      (i64.eq (i64.shr_u (i64.const -100) (i64.const 3))
              (i64.const 2305843009213693939)))
  (export "i64_shr_s" $i64_shr_s)
  (func $i64_shr_s (result i32)
      (i64.eq (i64.shr_s (i64.const -100) (i64.const 3)) (i64.const -13)))

  ;; f32
  (export "f32_add" $f32_add)
  (func $f32_add (result f32) (f32.add (f32.const 1.25) (f32.const 3.75)))
  (export "f32_sub" $f32_sub)
  (func $f32_sub (result f32) (f32.sub (f32.const 4.5) (f32.const 1e4)))
  (export "f32_mul" $f32_mul)
  (func $f32_mul (result f32) (f32.mul (f32.const 1234.5) (f32.const -6.875)))
  (export "f32_div" $f32_div)
  (func $f32_div (result f32) (f32.div (f32.const 1e14) (f32.const -2e5)))
  (;
    currently unsupported in v8-native-prototype
    (export "f32_min" $f32_min)
    (func $f32_min (result f32) (f32.min (f32.const 0) (f32.const 0)))
    (export "f32_max" $f32_max)
    (func $f32_max (result f32) (f32.max (f32.const 0) (f32.const 0)))
    (export "f32_copysign" $f32_copysign)
    (func $f32_copysign (result f32) (f32.copysign (f32.const 0) (f32.const 0)))
  ;)

  ;; f64
  (export "f64_add" $f64_add)
  (func $f64_add (result f64) (f64.add (f64.const 987654321)
                                       (f64.const 123456789)))
  ;; seems to be returning the first value, not subtracting.
  (export "f64_sub" $f64_sub)
  (func $f64_sub (result f64) (f64.sub (f64.const 1234e56) (f64.const 5.5e23)))

  (export "f64_mul" $f64_mul)
  (func $f64_mul (result f64) (f64.mul (f64.const -123e4) (f64.const 12341234)))
  (export "f64_div" $f64_div)
  (func $f64_div (result f64) (f64.div (f64.const 1e200) (f64.const 1e50)))
  (;
    currently unsupported in v8-native-prototype
    (export "f64_min" $f64_min)
    (func $f64_min (result f64) (f64.min (f64.const 0) (f64.const 0)))
    (export "f64_max" $f64_max)
    (func $f64_max (result f64) (f64.max (f64.const 0) (f64.const 0)))
    (export "f64_copysign" $f64_copysign)
    (func $f64_copysign (result f64) (f64.copysign (f64.const 0) (f64.const 0)))
  ;)
  )
# STDOUT:
i32_add() = 3
i32_sub() = 16
i32_mul() = 21
i32_div_s() = -2
i32_div_u() = 2147483646
i32_rem_s() = -1
i32_rem_u() = 1
i32_and() = 1
i32_or() = 15
i32_xor() = 14
i32_shl() = -800
i32_shr_u() = 536870899
i32_shr_s() = -13
i64_add() = 1
i64_sub() = 1
i64_mul() = 1
i64_div_s() = 1
i64_div_u() = 1
i64_rem_s() = 1
i64_rem_u() = 1
i64_and() = 1
i64_or() = 1
i64_xor() = 1
i64_shl() = 1
i64_shr_u() = 1
i64_shr_s() = 1
f32_add() = 5
f32_sub() = -9995.5
f32_mul() = -8487.1875
f32_div() = -500000000
f64_add() = 1111111110
f64_sub() = 1.234e+59
f64_mul() = -15179717820000
f64_div() = 1e+150
