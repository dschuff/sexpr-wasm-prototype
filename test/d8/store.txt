# EXE: test/run-d8.py
(module
  (memory 128)

  (export "i32_store8" $i32_store8)
  (func $i32_store8 (result i32)
      (i32.store8 (i32.const 0) (i32.const 0xfb))
      (i32.store8 (i32.const 1) (i32.const 0xfc))
      (i32.store8 (i32.const 2) (i32.const 0xfd))
      (i32.store8 (i32.const 3) (i32.const 0xfe))
      (i32.load (i32.const 0)))

  (export "i32_store16" $i32_store16)
  (func $i32_store16 (result i32)
      (i32.store16 (i32.const 0) (i32.const 0xcac9))
      (i32.store16 (i32.const 2) (i32.const 0xcccb))
      (i32.load (i32.const 0)))

  (export "i32_store" $i32_store)
  (func $i32_store (result i32)
      (i32.store (i32.const 0) (i32.const -123456))
      (i32.load (i32.const 0)))

  ;; v8-native-prototype currently crashes if you try to return an i64, so
  ;; we'll do a comparison against the expected value instead.
  (export "i64_store" $i64_store)
  (func $i64_store (result i32)
      (i64.store (i32.const 0) (i64.const 0xbaddc0de600dd00d))
      (i64.eq (i64.load (i32.const 0)) (i64.const 0xbaddc0de600dd00d)))

  (export "f32_store" $f32_store)
  (func $f32_store (result i32)
      (f32.store (i32.const 0) (f32.const 1.5))
      (i32.load (i32.const 0)))

  (export "f64_store" $f64_store)
  (func $f64_store (result i32)
      (f64.store (i32.const 0) (f64.const -1000.75))
      (i32.load (i32.const 4)))
)
# STDOUT:
i32_store8() = -16909061
i32_store16() = -859059511
i32_store() = -123456
i64_store() = 1
f32_store() = 1069547520
f64_store() = -1064352256
