# FLAGS: -dv
(module
  (func
    (i32.add
      (i32.sub
        (i32.mul
          (i32.div_s
            (i32.div_u
              (i32.rem_s
                (i32.rem_u
                  (i32.and
                    (i32.or
                      (i32.xor
                        (i32.shl
                          (i32.shr_u
                            (i32.shr_s
                              (i32.const 0)
                              (i32.const 0))
                            (i32.const 0))
                          (i32.const 0))
                        (i32.const 0))
                      (i32.const 0))
                    (i32.const 0))
                  (i32.const 0))
                (i32.const 0))
              (i32.const 0))
            (i32.const 0))
          (i32.const 0))
        (i32.const 0))
      (i32.const 0))

    (i64.add
      (i64.sub
        (i64.mul
          (i64.div_s
            (i64.div_u
              (i64.rem_s
                (i64.rem_u
                  (i64.and
                    (i64.or
                      (i64.xor
                        (i64.shl
                          (i64.shr_u
                            (i64.shr_s
                              (i64.const 0)
                              (i64.const 0))
                            (i64.const 0))
                          (i64.const 0))
                        (i64.const 0))
                      (i64.const 0))
                    (i64.const 0))
                  (i64.const 0))
                (i64.const 0))
              (i64.const 0))
            (i64.const 0))
          (i64.const 0))
        (i64.const 0))
      (i64.const 0))

    (f32.add
      (f32.sub
        (f32.mul
          (f32.div
            (f32.min
              (f32.max
                (f32.copysign
                  (f32.const 0)
                  (f32.const 0))
                (f32.const 0))
              (f32.const 0))
            (f32.const 0))
          (f32.const 0))
        (f32.const 0))
      (f32.const 0))

    (f64.add
      (f64.sub
        (f64.mul
          (f64.div
            (f64.min
              (f64.max
                (f64.copysign
                  (f64.const 0)
                  (f64.const 0))
                (f64.const 0))
              (f64.const 0))
            (f64.const 0))
          (f64.const 0))
        (f64.const 0))
      (f64.const 0))

))

# STDOUT:
0000000: 00                                         ; mem size log 2
0000001: 01                                         ; export mem
0000002: 0000                                       ; num globals
0000004: 0100                                       ; num funcs
0000006: 0000                                       ; num data segments
; function header 0
0000008: 00                                         ; func num args
0000009: 00                                         ; func result type
000000a: 0000 0000                                  ; func name offset
000000e: 0000 0000                                  ; func code start offset
0000012: 0000 0000                                  ; func code end offset
0000016: 0000                                       ; num local i32
0000018: 0000                                       ; num local i64
000001a: 0000                                       ; num local f32
000001c: 0000                                       ; num local f64
000001e: 00                                         ; export func
000001f: 00                                         ; func external
; function data 0
000000e: 2000 0000                                  ; FIXUP func code start offset
0000020: 03                                         ; OPCODE_BLOCK
0000021: 00                                         ; toplevel block num expressions
0000022: 40                                         ; OPCODE_I32_ADD
0000023: 41                                         ; OPCODE_I32_SUB
0000024: 42                                         ; OPCODE_I32_MUL
0000025: 43                                         ; OPCODE_I32_SDIV
0000026: 44                                         ; OPCODE_I32_UDIV
0000027: 45                                         ; OPCODE_I32_SREM
0000028: 46                                         ; OPCODE_I32_UREM
0000029: 47                                         ; OPCODE_I32_AND
000002a: 48                                         ; OPCODE_I32_OR
000002b: 49                                         ; OPCODE_I32_XOR
000002c: 4a                                         ; OPCODE_I32_SHL
000002d: 4b                                         ; OPCODE_I32_SHR
000002e: 4c                                         ; OPCODE_I32_SAR
000002f: 11                                         ; OPCODE_I32_CONST
0000030: 0000 0000                                  ; u32 literal
0000034: 11                                         ; OPCODE_I32_CONST
0000035: 0000 0000                                  ; u32 literal
0000039: 11                                         ; OPCODE_I32_CONST
000003a: 0000 0000                                  ; u32 literal
000003e: 11                                         ; OPCODE_I32_CONST
000003f: 0000 0000                                  ; u32 literal
0000043: 11                                         ; OPCODE_I32_CONST
0000044: 0000 0000                                  ; u32 literal
0000048: 11                                         ; OPCODE_I32_CONST
0000049: 0000 0000                                  ; u32 literal
000004d: 11                                         ; OPCODE_I32_CONST
000004e: 0000 0000                                  ; u32 literal
0000052: 11                                         ; OPCODE_I32_CONST
0000053: 0000 0000                                  ; u32 literal
0000057: 11                                         ; OPCODE_I32_CONST
0000058: 0000 0000                                  ; u32 literal
000005c: 11                                         ; OPCODE_I32_CONST
000005d: 0000 0000                                  ; u32 literal
0000061: 11                                         ; OPCODE_I32_CONST
0000062: 0000 0000                                  ; u32 literal
0000066: 11                                         ; OPCODE_I32_CONST
0000067: 0000 0000                                  ; u32 literal
000006b: 11                                         ; OPCODE_I32_CONST
000006c: 0000 0000                                  ; u32 literal
0000070: 11                                         ; OPCODE_I32_CONST
0000071: 0000 0000                                  ; u32 literal
0000075: 5b                                         ; OPCODE_I64_ADD
0000076: 5c                                         ; OPCODE_I64_SUB
0000077: 5d                                         ; OPCODE_I64_MUL
0000078: 5e                                         ; OPCODE_I64_SDIV
0000079: 5f                                         ; OPCODE_I64_UDIV
000007a: 60                                         ; OPCODE_I64_SREM
000007b: 61                                         ; OPCODE_I64_UREM
000007c: 62                                         ; OPCODE_I64_AND
000007d: 63                                         ; OPCODE_I64_OR
000007e: 64                                         ; OPCODE_I64_XOR
000007f: 65                                         ; OPCODE_I64_SHL
0000080: 66                                         ; OPCODE_I64_SHR
0000081: 67                                         ; OPCODE_I64_SAR
0000082: 12                                         ; OPCODE_I64_CONST
0000083: 0000 0000 0000 0000                        ; u64 literal
000008b: 12                                         ; OPCODE_I64_CONST
000008c: 0000 0000 0000 0000                        ; u64 literal
0000094: 12                                         ; OPCODE_I64_CONST
0000095: 0000 0000 0000 0000                        ; u64 literal
000009d: 12                                         ; OPCODE_I64_CONST
000009e: 0000 0000 0000 0000                        ; u64 literal
00000a6: 12                                         ; OPCODE_I64_CONST
00000a7: 0000 0000 0000 0000                        ; u64 literal
00000af: 12                                         ; OPCODE_I64_CONST
00000b0: 0000 0000 0000 0000                        ; u64 literal
00000b8: 12                                         ; OPCODE_I64_CONST
00000b9: 0000 0000 0000 0000                        ; u64 literal
00000c1: 12                                         ; OPCODE_I64_CONST
00000c2: 0000 0000 0000 0000                        ; u64 literal
00000ca: 12                                         ; OPCODE_I64_CONST
00000cb: 0000 0000 0000 0000                        ; u64 literal
00000d3: 12                                         ; OPCODE_I64_CONST
00000d4: 0000 0000 0000 0000                        ; u64 literal
00000dc: 12                                         ; OPCODE_I64_CONST
00000dd: 0000 0000 0000 0000                        ; u64 literal
00000e5: 12                                         ; OPCODE_I64_CONST
00000e6: 0000 0000 0000 0000                        ; u64 literal
00000ee: 12                                         ; OPCODE_I64_CONST
00000ef: 0000 0000 0000 0000                        ; u64 literal
00000f7: 12                                         ; OPCODE_I64_CONST
00000f8: 0000 0000 0000 0000                        ; u64 literal
0000100: 75                                         ; OPCODE_F32_ADD
0000101: 76                                         ; OPCODE_F32_SUB
0000102: 77                                         ; OPCODE_F32_MUL
0000103: 78                                         ; OPCODE_F32_DIV
0000104: 79                                         ; OPCODE_F32_MIN
0000105: 7a                                         ; OPCODE_F32_MAX
0000106: 7d                                         ; OPCODE_F32_COPYSIGN
0000107: 14                                         ; OPCODE_F32_CONST
0000108: 0000 0000                                  ; f32 literal
000010c: 14                                         ; OPCODE_F32_CONST
000010d: 0000 0000                                  ; f32 literal
0000111: 14                                         ; OPCODE_F32_CONST
0000112: 0000 0000                                  ; f32 literal
0000116: 14                                         ; OPCODE_F32_CONST
0000117: 0000 0000                                  ; f32 literal
000011b: 14                                         ; OPCODE_F32_CONST
000011c: 0000 0000                                  ; f32 literal
0000120: 14                                         ; OPCODE_F32_CONST
0000121: 0000 0000                                  ; f32 literal
0000125: 14                                         ; OPCODE_F32_CONST
0000126: 0000 0000                                  ; f32 literal
000012a: 14                                         ; OPCODE_F32_CONST
000012b: 0000 0000                                  ; f32 literal
000012f: 89                                         ; OPCODE_F64_ADD
0000130: 8a                                         ; OPCODE_F64_SUB
0000131: 8b                                         ; OPCODE_F64_MUL
0000132: 8c                                         ; OPCODE_F64_DIV
0000133: 8d                                         ; OPCODE_F64_MIN
0000134: 8e                                         ; OPCODE_F64_MAX
0000135: 91                                         ; OPCODE_F64_COPYSIGN
0000136: 13                                         ; OPCODE_F64_CONST
0000137: 0000 0000 0000 0000                        ; f64 literal
000013f: 13                                         ; OPCODE_F64_CONST
0000140: 0000 0000 0000 0000                        ; f64 literal
0000148: 13                                         ; OPCODE_F64_CONST
0000149: 0000 0000 0000 0000                        ; f64 literal
0000151: 13                                         ; OPCODE_F64_CONST
0000152: 0000 0000 0000 0000                        ; f64 literal
000015a: 13                                         ; OPCODE_F64_CONST
000015b: 0000 0000 0000 0000                        ; f64 literal
0000163: 13                                         ; OPCODE_F64_CONST
0000164: 0000 0000 0000 0000                        ; f64 literal
000016c: 13                                         ; OPCODE_F64_CONST
000016d: 0000 0000 0000 0000                        ; f64 literal
0000175: 13                                         ; OPCODE_F64_CONST
0000176: 0000 0000 0000 0000                        ; f64 literal
0000021: 04                                         ; FIXUP toplevel block num expressions
0000012: 7e01 0000                                  ; FIXUP func code end offset
; names
0000000: 0001 0000 0100 0000 0000 0000 0000 2000  .............. .
0000010: 0000 7e01 0000 0000 0000 0000 0000 0000  ..~.............
0000020: 0304 4041 4243 4445 4647 4849 4a4b 4c11  ..@ABCDEFGHIJKL.
0000030: 0000 0000 1100 0000 0011 0000 0000 1100  ................
0000040: 0000 0011 0000 0000 1100 0000 0011 0000  ................
0000050: 0000 1100 0000 0011 0000 0000 1100 0000  ................
0000060: 0011 0000 0000 1100 0000 0011 0000 0000  ................
0000070: 1100 0000 005b 5c5d 5e5f 6061 6263 6465  .....[\]^_`abcde
0000080: 6667 1200 0000 0000 0000 0012 0000 0000  fg..............
0000090: 0000 0000 1200 0000 0000 0000 0012 0000  ................
00000a0: 0000 0000 0000 1200 0000 0000 0000 0012  ................
00000b0: 0000 0000 0000 0000 1200 0000 0000 0000  ................
00000c0: 0012 0000 0000 0000 0000 1200 0000 0000  ................
00000d0: 0000 0012 0000 0000 0000 0000 1200 0000  ................
00000e0: 0000 0000 0012 0000 0000 0000 0000 1200  ................
00000f0: 0000 0000 0000 0012 0000 0000 0000 0000  ................
0000100: 7576 7778 797a 7d14 0000 0000 1400 0000  uvwxyz}.........
0000110: 0014 0000 0000 1400 0000 0014 0000 0000  ................
0000120: 1400 0000 0014 0000 0000 1400 0000 0089  ................
0000130: 8a8b 8c8d 8e91 1300 0000 0000 0000 0013  ................
0000140: 0000 0000 0000 0000 1300 0000 0000 0000  ................
0000150: 0013 0000 0000 0000 0000 1300 0000 0000  ................
0000160: 0000 0013 0000 0000 0000 0000 1300 0000  ................
0000170: 0000 0000 0013 0000 0000 0000 0000       ..............
